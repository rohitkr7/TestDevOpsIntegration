name: customchange

on:
#   pull_request:
#     branches: ['master']
  workflow_dispatch:


jobs:
  buildproject:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      # - name: Failing step
      #   id: demo
      #   # run: exit 1
      #   # run: throw error
      # - name: The demo step has failed
      #   # if: ${{ failure() && steps.demo.conclusion == 'failure' }}
      #   if: ${{ always() }}
      #   run: echo After failure step.    
      - name: Run deployment scripts
        run: echo Initiating Deployment.
          
      # - name: Checkout Code
      #   uses: actions/checkout@v2
      
      # - name: Setup JDK 11 for Sonar Cloud
      #   uses: actions/setup-java@v1
      #   with:
      #       java-version: 11
      
      # - name: Maven Build
      #   run: mvn clean install -DskipTests=true
     
  registerartifact:
    name: Register Artifact
    runs-on: ubuntu-latest
    needs: buildproject
    steps:
      - name: ServiceNow Register Artifact
        continue-on-error: true
#         uses: ServiceNow/servicenow-devops-register-artifact@main
#         uses: ServiceNow/servicenow-devops-register-artifact@v1.34.2
        uses: ServiceNow/servicenow-devops-register-artifact@main
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }} 
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Artifact test error'
          artifacts: '[{"name": "app-build","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'		  
  registerpackage:
    name: Register Package
    needs: registerartifact
    runs-on: ubuntu-latest
    steps:
      - name: ServiceNow Register Package
        uses: ServiceNow/servicenow-devops-register-package@main
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }} 
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Register Package'
          #artifacts: '[{"name": "com:hardening1.39","version": "1.12","semanticVersion": "1.12.0","repositoryName": "${{ github.repository }}"}]'
          artifacts: '[{"name": "app-build","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
          package-name: 'hardening1.39.war'
  deploy:
    name: Deploy
    needs: registerpackage    
    runs-on: ubuntu-latest
    steps:
      - name: Custom Change
        # uses: velivalab/servicenow-devops-change@master
        uses: ServiceNow/servicenow-devops-change@main
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Deploy'
          change-request: '{"autoCloseChange":true,"attributes":{"close_notes":"Automated Software Deployment for close_Notes"}}'
          interval: '100'
          timeout: '3600'
  # seconddeploy:
  #   name: Second Deploy
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Second Custom Change
  #       uses: velivalab/servicenow-devops-change@master
  #       with:
  #         devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
  #         devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         context-github: ${{ toJSON(github) }}
  #         job-name: 'seconddeploy'
  #         # change-request: '{"setCloseCode":"true","autoCloseChange":false,"attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed."}}'
  #         change-request: '{"autoCloseChange":true}'
          # change-request: '{"attributes":{"close_notes":"set close code default value"}}'
          # change-request: '{"setCloseCode":"true","autoCloseChange":false,"attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed."}}'            
  #         # change-request: '{"setCloseCode":true}'
  #         interval: '100'
  #         timeout: '3600'
  #     - name: Continue On Error
  #       if: always()
  #       run: echo Completed Deployment currently in Continue On Error state.
  # post_change:
  #   name: Post Change
  #   needs: seconddeploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run deployment scripts
  #       run: echo Completed Deployment currently in post_change state.
      # - name: Failing step
      #   id: demo
      #   run: exit 1
      # - name: The demo step has failed
      #   # if: ${{ failure() && steps.demo.conclusion == 'failure' }}
      #   if: ${{ always() }}
      #   run: echo After failure step.
#   integrationTest:
#     needs: deploy
#     name: Integration Tests
#     runs-on: ubuntu-latest
#     steps:
