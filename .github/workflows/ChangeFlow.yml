
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: GitHub Change Workflow with SNOW custom tasks
on: workflow_dispatch
#  pull_request_target:
#    types:
#      - closed
jobs:
    build:
        # Running your workflow when a pull request merges
        # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-when-a-pull-request-merges-1
        #if: github.event.pull_request.merged == true
        name: Build
        runs-on: ubuntu-latest
        steps:           
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
            - name: Set up JDK 11
              uses: actions/setup-java@v1
              with:
                  java-version: 11
            - name: Cache SonarCloud packages
              uses: actions/cache@v1
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Cache Maven packages
              uses: actions/cache@v1
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2
    test:
        #if: github.event.pull_request.merged == true
        name: Test
        needs: build
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
            - name: List current directory
              run: ls -a
            - name: Run Tests with Maven
              run: mvn -B test --file pom.xml
            # run: |
            #       ls -l
            # mvn clean test
            # run: mvn test
            # mvn -B test --file ./devops-test-repo/pom.xml
            - name: What's in the target directory
              run: |
                    cd target
                    ls -a
            # - name: Sonarcloud Scan
            #  env:
            #      GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}  # Needed to get PR information, if any
            #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #  run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=devops-test-repo
            - name: Sonar Cloud Analysis
              if: success() # always() failure() success()
              run: >                  
                mvn -B verify -DskipTests org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN
              env:
                  GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
                  SONAR_URL: ${{ secrets.SONAR_URL }}
                  SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}
#place sonar here
            #- name: Run JUnit Tests
            #  run: mvn test -Dmaven.test.failure.ignore=true surefire-report:report
            - name: ServiceNow DevOps Unit Test Results
            # You may pin to the exact commit or the version.
            # uses: ServiceNow/servicenow-devops-test-report@6c7ef85f6aedfb7ab17e4d17c52c14c5f2f455fd
              uses: ServiceNow/servicenow-devops-test-report@main
              with:
                  # Devops Integration User Name
                  devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
                  # Devops Integration User Password
                  devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
                  # ServiceNow Instance Name
                  instance-url: ${{ secrets.SN_INSTANCE_URL }}
                  # Orchestration Tool Id
                  tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
                  # Job Name
                  job-name: 'Test' # Should be same name as declared in 'name' clause of the current Stage
                  # Github Context
                  context-github: ${{ toJSON(github) }}
                  # JUnit xml report file name with path
                  xml-report-filename: target/surefire-reports/testng-results.xml # if only JUnit tests, use target/surefire-reports/testng-results.xml
                                                                                  # if both JUnit & TestNG tests, use target/surefire-reports/testng-junit-results/testng-results.xml
                  # GitHub Custom Action
                  test-type: # optional, default is JUnit  
    SonarTest:
         name: Sonar stage
         needs: test 
         runs-on: ubuntu-latest
         steps:
            - name: Run deployment scripts
              run: echo Completed Deployment
              
    deploy:
        #if: github.event.pull_request.merged == true
        name: Deploy
        needs: SonarTest
        runs-on: ubuntu-latest
        steps:     
            - name: ServiceNow DevOps Change Automation
            # You may pin to the exact commit or the version.
            # uses: ServiceNow/servicenow-devops-change@0f57435999463cc1dea44bde4f5eca9879474b85
              uses: ServiceNow/servicenow-devops-change@dev
              with:
                  # ServiceNow Instance URL
                  instance-url: ${{ secrets.SN_INSTANCE_URL }}
                  # Devops Integration User Name
                  devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
                  # Devops Integration User Password
                  devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
                  # Orchestration Tool Id
                  tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
                  # Display Name of the Job
                  job-name: 'Deploy'
                  # Github Context
                  context-github: ${{ toJSON(github) }}
                  # The max. time in seconds to wait until the action should fail.
                  timeout: 3600 # optional, default is 3600
                  # The time in seconds to wait between trying the API.
                  interval: 100 # optional, default is 100
                  # The customized inputs to create change with the requested details.
                  change-request: '{
                      "setCloseCode": "true",
                      "attributes": {
                          "short_description": "Automated Software Deployment",
                          "chg_model": "adffaa9e4370211072b7f6be5bb8f2ed",
                          "description": "Automated Software Deployment.",
                          "assignment_group": "a715cd759f2002002920bde8132e7018",
                          "implementation_plan": "Software update is tested and results can be found in Test Summaries Tab.",
                          "backout_plan": "When software fails in production, the previous software release will be re-deployed.",
                          "test_plan": "Testing if the software was successfully deployed"
                      }
                  }'
#             - name: Run deployment scripts
#               run: echo Completed Deployment
    postdeploy:
        #if: github.event.pull_request.merged == true
        name: Post Deploy
        needs: deploy
        runs-on: ubuntu-latest
        steps:
            - name: Run deployment scripts
              run: echo Completed Deployment
